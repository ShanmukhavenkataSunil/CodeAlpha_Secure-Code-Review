# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1w5oR_JvYqAQjRM6bPBLYDFQr79F34Blh

# **Flask Application code:**
"""

from flask import Flask, request, render_template, redirect, url_for, session, escape

app = Flask(__name__)
app.secret_key = 'supersecretkey'

# Mock database
users = {'admin': 'password123'}

@app.route('/')
def index():
    if 'username' in session:
        return f'Logged in as {escape(session["username"])}'
    return 'You are not logged in'

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        if username in users and users[username] == password:
            session['username'] = username
            return redirect(url_for('index'))
        else:
            return 'Invalid credentials'
    return render_template('login.html')

@app.route('/logout')
def logout():
    session.pop('username', None)
    return redirect(url_for('index'))

if __name__ == '__main__':
    app.run(debug=True)

"""# **Manual Code Review and Security Recommendations**

1.Hardcoded Secret Key:

Issue: The secret_key is hardcoded in the source code, which is a security risk.
Recommendation: Use environment variables to set the secret key securely.
"""

import os
app.secret_key = os.environ.get('SECRET_KEY', 'defaultsecretkey')

"""2.Weak Password Storage:

Issue: Passwords are stored in plain text in the users dictionary.
Recommendation: Use a secure hashing algorithm like bcrypt to store passwords
"""

from werkzeug.security import generate_password_hash, check_password_hash

# During user registration
users['admin'] = generate_password_hash('password123')

# During login
if username in users and check_password_hash(users[username], password):

"""3.Lack of Input Validation:

Issue: User input is not validated or sanitized.
Recommendation: Implement proper input validation and sanitization.
"""

from wtforms import Form, StringField, PasswordField, validators

class LoginForm(Form):
    username = StringField('Username', [validators.Length(min=4, max=25)])
    password = PasswordField('Password', [validators.DataRequired()])

@app.route('/login', methods=['GET', 'POST'])
def login():
    form = LoginForm(request.form)
    if request.method == 'POST' and form.validate():
        username = form.username.data
        password = form.password.data
        # Continue with authentication

"""4.Potential for Cross-Site Scripting (XSS):

Issue: Usernames are directly rendered in HTML without escaping.
Recommendation: Use Flask's built-in escape function or Jinja2's autoescaping.
"""

return f'Logged in as {escape(session["username"])}'

"""# **Static Code Analysis with Bandit**

Bandit is a tool designed to find common security issues in Python code. Install Bandit using pip:
"""

pip install bandit

"""Run Bandit on your code:"""

bandit -r app.py

"""**Bandit Output and Analysis**"""

[main]	INFO	running on Python 3.8.10
[tester]	INFO	Starting analysis of file app.py

Run started:
	...

Test results:
	>> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'password123'
	   Severity: High   Confidence: Medium
	   Location: app.py:8
	   More Info: https://bandit.readthedocs.io/en/latest/plugins/b105_hardcoded_password_string.html
	8          users = {'admin': 'password123'}

	>> Issue: [B104:hardcoded_bind_all_interfaces] Possible binding to all interfaces.
	   Severity: Medium   Confidence: High
	   Location: app.py:30
	   More Info: https://bandit.readthedocs.io/en/latest/plugins/b104_hardcoded_bind_all_interfaces.html
	30        app.run(debug=True)

Code scanned:
	Total lines of code: 42
	Total lines skipped (#nosec): 0

Run metrics:
	Total issues (by severity):
		High: 1
		Medium: 1
		Low: 0

	Total issues (by confidence):
		High: 1
		Medium: 1
		Low: 0

"""# **Addressing Bandit Findings**

1.Hardcoded Password:

Addressed earlier: Use environment variables and secure hashing for passwords.

2.Binding to All Interfaces:

Issue: By default, app.run(debug=True) binds to all network interfaces, which can expose the app to remote attacks.
Recommendation: Explicitly bind to localhost for development and configure proper host/port settings for production.
"""

if __name__ == '__main__':
    app.run(debug=True, host='127.0.0.1')